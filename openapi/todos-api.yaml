openapi: 3.0.3
info:
  title: Todo API
  description: API for managing todo items
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server

x-docs:
  codeLanguages:
    - javascript
    - python
    - java
  route: "docs/api/todos-api"
  sidebar:
  -
    pages:
      - group: Todos
        path: todos
        pages:
          - type: endpoint
            key: GET /todos
            path: get

          - type: endpoint
            key: POST /todos
            path: post

          - type: endpoint
            key: GET /todos/{id}
            path: id

          - type: endpoint
            key: PUT /todos/{id}
            path: update

          - type: endpoint
            key: DELETE /todos/{id}
            path: delete

          - type: endpoint
            key: PATCH /todos/{id}/complete
            path: complete

          - type: object
            key: Todo
            path: object

          - type: object
            key: TodoInput
            path: todo-input

  - group: Objects
    path: objects
    pages:
      - type: object
        key: Error
        path: error

paths:
  /todos:  
    get:
      summary: Get all todos
      description: Retrieve a list of all todo items
      operationId: getAllTodos
      parameters:
        - name: completed
          in: query
          required: false
          description: Filter by completion status
          schema:
            type: boolean
        - name: limit
          in: query
          required: false
          description: Number of todos to return
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: List of todos retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      x-codeSamples:
        - lang: bash
          label: Get all todos
          source: |
            curl -X GET https://api.example.com/v1/todos

        - lang: javascript
          label: Get all todos
          source: |
            const api = require('todo-api-client');
            api.todos.list();

        - lang: bash
          label: Get completed todos
          source: |
            curl -X GET "https://api.example.com/v1/todos?completed=true"

    post:
      summary: Create a new todo
      description: Create a new todo item
      operationId: createTodo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        '201':
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /todos/{id}:
    get:
      summary: Get a todo by ID
      description: Retrieve a specific todo item by its ID
      operationId: getTodoById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the todo
          schema:
            type: string
      responses:
        '200':
          description: Todo found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a todo
      description: Update an existing todo item
      operationId: updateTodo
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the todo
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        '200':
          description: Todo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a todo
      description: Delete a todo item by its ID
      operationId: deleteTodo
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the todo
          schema:
            type: string
      responses:
        '204':
          description: Todo deleted successfully
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /todos/{id}/complete:
    patch:
      summary: Mark todo as completed
      description: Mark a todo item as completed
      operationId: completeTodo
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the todo
          schema:
            type: string
      responses:
        '200':
          description: Todo marked as completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Todo:
      type: object
      required:
        - id
        - title
        - completed
        - created_at
      properties:
        id:
          type: string
          description: Unique identifier for the todo
        title:
          type: string
          description: The title of the todo
        description:
          type: string
          description: Optional description of the todo
        completed:
          type: boolean
          description: Whether the todo is completed
          default: false
        priority:
          type: string
          enum: [low, medium, high]
          description: Priority level of the todo
          default: medium
        due_date:
          type: string
          format: date-time
          description: Due date for the todo
        created_at:
          type: string
          format: date-time
          description: When the todo was created
        updated_at:
          type: string
          format: date-time
          description: When the todo was last updated
      example:
        id: "todo_123"
        title: "Buy groceries"
        description: "Get milk, bread, and eggs"
        completed: false
        priority: "high"
        due_date: "2024-01-15T18:00:00Z"
        created_at: "2024-01-10T10:00:00Z"
        updated_at: "2024-01-10T10:00:00Z"

    TodoInput:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: The title of the todo
        description:
          type: string
          description: Optional description of the todo
        priority:
          type: string
          enum: [low, medium, high]
          description: Priority level of the todo
          default: medium
        due_date:
          type: string
          format: date-time
          description: Due date for the todo
      example:
        title: "Buy groceries"
        description: "Get milk, bread, and eggs"
        priority: "high"
        due_date: "2024-01-15T18:00:00Z"

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details
      example:
        message: "Todo not found"
        code: "TODO_NOT_FOUND"
        details:
          id: "todo_123"

tags:
  - name: todos
    description: Operations related to todo items 